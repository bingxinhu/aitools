{"remainingRequest":"/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/node_modules/babel-loader/lib/index.js!/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/src/components/UploadExcel/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/src/components/UploadExcel/index.vue","mtime":1669257735071},{"path":"/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/babel.config.js","mtime":1669257735055},{"path":"/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/node_modules/cache-loader/dist/cjs.js","mtime":1670489672947},{"path":"/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/node_modules/babel-loader/lib/index.js","mtime":1670489673015},{"path":"/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/node_modules/cache-loader/dist/cjs.js","mtime":1670489672947},{"path":"/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/node_modules/vue-loader/lib/index.js","mtime":1670489672091}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnB1c2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50ZXN0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCgppbXBvcnQgWExTWCBmcm9tICd4bHN4JzsKZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiB7CiAgICBiZWZvcmVVcGxvYWQ6IEZ1bmN0aW9uLAogICAgLy8gZXNsaW50LWRpc2FibGUtbGluZQogICAgb25TdWNjZXNzOiBGdW5jdGlvbiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbG9hZGluZzogZmFsc2UsCiAgICAgIGV4Y2VsRGF0YTogewogICAgICAgIGhlYWRlcjogbnVsbCwKICAgICAgICByZXN1bHRzOiBudWxsCiAgICAgIH0KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZW5lcmF0ZURhdGE6IGZ1bmN0aW9uIGdlbmVyYXRlRGF0YShfcmVmKSB7CiAgICAgIHZhciBoZWFkZXIgPSBfcmVmLmhlYWRlciwKICAgICAgICByZXN1bHRzID0gX3JlZi5yZXN1bHRzOwogICAgICB0aGlzLmV4Y2VsRGF0YS5oZWFkZXIgPSBoZWFkZXI7CiAgICAgIHRoaXMuZXhjZWxEYXRhLnJlc3VsdHMgPSByZXN1bHRzOwogICAgICB0aGlzLm9uU3VjY2VzcyAmJiB0aGlzLm9uU3VjY2Vzcyh0aGlzLmV4Y2VsRGF0YSk7CiAgICB9LAogICAgaGFuZGxlRHJvcDogZnVuY3Rpb24gaGFuZGxlRHJvcChlKSB7CiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgaWYgKHRoaXMubG9hZGluZykgcmV0dXJuOwogICAgICB2YXIgZmlsZXMgPSBlLmRhdGFUcmFuc2Zlci5maWxlczsKICAgICAgaWYgKGZpbGVzLmxlbmd0aCAhPT0gMSkgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ09ubHkgc3VwcG9ydCB1cGxvYWRpbmcgb25lIGZpbGUhJyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHZhciByYXdGaWxlID0gZmlsZXNbMF07IC8vIG9ubHkgdXNlIGZpbGVzWzBdCgogICAgICBpZiAoIXRoaXMuaXNFeGNlbChyYXdGaWxlKSkgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ09ubHkgc3VwcG9ydHMgdXBsb2FkIC54bHN4LCAueGxzLCAuY3N2IHN1ZmZpeCBmaWxlcycpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICB0aGlzLnVwbG9hZChyYXdGaWxlKTsKICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgfSwKICAgIGhhbmRsZURyYWdvdmVyOiBmdW5jdGlvbiBoYW5kbGVEcmFnb3ZlcihlKSB7CiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdjb3B5JzsKICAgIH0sCiAgICBoYW5kbGVVcGxvYWQ6IGZ1bmN0aW9uIGhhbmRsZVVwbG9hZCgpIHsKICAgICAgdGhpcy4kcmVmc1snZXhjZWwtdXBsb2FkLWlucHV0J10uY2xpY2soKTsKICAgIH0sCiAgICBoYW5kbGVDbGljazogZnVuY3Rpb24gaGFuZGxlQ2xpY2soZSkgewogICAgICB2YXIgZmlsZXMgPSBlLnRhcmdldC5maWxlczsKICAgICAgdmFyIHJhd0ZpbGUgPSBmaWxlc1swXTsgLy8gb25seSB1c2UgZmlsZXNbMF0KICAgICAgaWYgKCFyYXdGaWxlKSByZXR1cm47CiAgICAgIHRoaXMudXBsb2FkKHJhd0ZpbGUpOwogICAgfSwKICAgIHVwbG9hZDogZnVuY3Rpb24gdXBsb2FkKHJhd0ZpbGUpIHsKICAgICAgdGhpcy4kcmVmc1snZXhjZWwtdXBsb2FkLWlucHV0J10udmFsdWUgPSBudWxsOyAvLyBmaXggY2FuJ3Qgc2VsZWN0IHRoZSBzYW1lIGV4Y2VsCgogICAgICBpZiAoIXRoaXMuYmVmb3JlVXBsb2FkKSB7CiAgICAgICAgdGhpcy5yZWFkZXJEYXRhKHJhd0ZpbGUpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB2YXIgYmVmb3JlID0gdGhpcy5iZWZvcmVVcGxvYWQocmF3RmlsZSk7CiAgICAgIGlmIChiZWZvcmUpIHsKICAgICAgICB0aGlzLnJlYWRlckRhdGEocmF3RmlsZSk7CiAgICAgIH0KICAgIH0sCiAgICByZWFkZXJEYXRhOiBmdW5jdGlvbiByZWFkZXJEYXRhKHJhd0ZpbGUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciBkYXRhID0gZS50YXJnZXQucmVzdWx0OwogICAgICAgICAgdmFyIHdvcmtib29rID0gWExTWC5yZWFkKGRhdGEsIHsKICAgICAgICAgICAgdHlwZTogJ2FycmF5JwogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgZmlyc3RTaGVldE5hbWUgPSB3b3JrYm9vay5TaGVldE5hbWVzWzBdOwogICAgICAgICAgdmFyIHdvcmtzaGVldCA9IHdvcmtib29rLlNoZWV0c1tmaXJzdFNoZWV0TmFtZV07CiAgICAgICAgICB2YXIgaGVhZGVyID0gX3RoaXMuZ2V0SGVhZGVyUm93KHdvcmtzaGVldCk7CiAgICAgICAgICB2YXIgcmVzdWx0cyA9IFhMU1gudXRpbHMuc2hlZXRfdG9fanNvbih3b3Jrc2hlZXQpOwogICAgICAgICAgX3RoaXMuZ2VuZXJhdGVEYXRhKHsKICAgICAgICAgICAgaGVhZGVyOiBoZWFkZXIsCiAgICAgICAgICAgIHJlc3VsdHM6IHJlc3VsdHMKICAgICAgICAgIH0pOwogICAgICAgICAgX3RoaXMubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgIH07CiAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHJhd0ZpbGUpOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRIZWFkZXJSb3c6IGZ1bmN0aW9uIGdldEhlYWRlclJvdyhzaGVldCkgewogICAgICB2YXIgaGVhZGVycyA9IFtdOwogICAgICB2YXIgcmFuZ2UgPSBYTFNYLnV0aWxzLmRlY29kZV9yYW5nZShzaGVldFsnIXJlZiddKTsKICAgICAgdmFyIEM7CiAgICAgIHZhciBSID0gcmFuZ2Uucy5yOwogICAgICAvKiBzdGFydCBpbiB0aGUgZmlyc3Qgcm93ICovCiAgICAgIGZvciAoQyA9IHJhbmdlLnMuYzsgQyA8PSByYW5nZS5lLmM7ICsrQykgewogICAgICAgIC8qIHdhbGsgZXZlcnkgY29sdW1uIGluIHRoZSByYW5nZSAqLwogICAgICAgIHZhciBjZWxsID0gc2hlZXRbWExTWC51dGlscy5lbmNvZGVfY2VsbCh7CiAgICAgICAgICBjOiBDLAogICAgICAgICAgcjogUgogICAgICAgIH0pXTsKICAgICAgICAvKiBmaW5kIHRoZSBjZWxsIGluIHRoZSBmaXJzdCByb3cgKi8KICAgICAgICB2YXIgaGRyID0gJ1VOS05PV04gJyArIEM7IC8vIDwtLSByZXBsYWNlIHdpdGggeW91ciBkZXNpcmVkIGRlZmF1bHQKICAgICAgICBpZiAoY2VsbCAmJiBjZWxsLnQpIGhkciA9IFhMU1gudXRpbHMuZm9ybWF0X2NlbGwoY2VsbCk7CiAgICAgICAgaGVhZGVycy5wdXNoKGhkcik7CiAgICAgIH0KICAgICAgcmV0dXJuIGhlYWRlcnM7CiAgICB9LAogICAgaXNFeGNlbDogZnVuY3Rpb24gaXNFeGNlbChmaWxlKSB7CiAgICAgIHJldHVybiAvXC4oeGxzeHx4bHN8Y3N2KSQvLnRlc3QoZmlsZS5uYW1lKTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <input ref=\"excel-upload-input\" class=\"excel-upload-input\" type=\"file\" accept=\".xlsx, .xls\" @change=\"handleClick\">\n    <div class=\"drop\" @drop=\"handleDrop\" @dragover=\"handleDragover\" @dragenter=\"handleDragover\">\n      Drop excel file here or\n      <el-button :loading=\"loading\" style=\"margin-left:16px;\" size=\"mini\" type=\"primary\" @click=\"handleUpload\">\n        Browse\n      </el-button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport XLSX from 'xlsx'\n\nexport default {\n  props: {\n    beforeUpload: Function, // eslint-disable-line\n    onSuccess: Function// eslint-disable-line\n  },\n  data() {\n    return {\n      loading: false,\n      excelData: {\n        header: null,\n        results: null\n      }\n    }\n  },\n  methods: {\n    generateData({ header, results }) {\n      this.excelData.header = header\n      this.excelData.results = results\n      this.onSuccess && this.onSuccess(this.excelData)\n    },\n    handleDrop(e) {\n      e.stopPropagation()\n      e.preventDefault()\n      if (this.loading) return\n      const files = e.dataTransfer.files\n      if (files.length !== 1) {\n        this.$message.error('Only support uploading one file!')\n        return\n      }\n      const rawFile = files[0] // only use files[0]\n\n      if (!this.isExcel(rawFile)) {\n        this.$message.error('Only supports upload .xlsx, .xls, .csv suffix files')\n        return false\n      }\n      this.upload(rawFile)\n      e.stopPropagation()\n      e.preventDefault()\n    },\n    handleDragover(e) {\n      e.stopPropagation()\n      e.preventDefault()\n      e.dataTransfer.dropEffect = 'copy'\n    },\n    handleUpload() {\n      this.$refs['excel-upload-input'].click()\n    },\n    handleClick(e) {\n      const files = e.target.files\n      const rawFile = files[0] // only use files[0]\n      if (!rawFile) return\n      this.upload(rawFile)\n    },\n    upload(rawFile) {\n      this.$refs['excel-upload-input'].value = null // fix can't select the same excel\n\n      if (!this.beforeUpload) {\n        this.readerData(rawFile)\n        return\n      }\n      const before = this.beforeUpload(rawFile)\n      if (before) {\n        this.readerData(rawFile)\n      }\n    },\n    readerData(rawFile) {\n      this.loading = true\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.onload = e => {\n          const data = e.target.result\n          const workbook = XLSX.read(data, { type: 'array' })\n          const firstSheetName = workbook.SheetNames[0]\n          const worksheet = workbook.Sheets[firstSheetName]\n          const header = this.getHeaderRow(worksheet)\n          const results = XLSX.utils.sheet_to_json(worksheet)\n          this.generateData({ header, results })\n          this.loading = false\n          resolve()\n        }\n        reader.readAsArrayBuffer(rawFile)\n      })\n    },\n    getHeaderRow(sheet) {\n      const headers = []\n      const range = XLSX.utils.decode_range(sheet['!ref'])\n      let C\n      const R = range.s.r\n      /* start in the first row */\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\n        /* find the cell in the first row */\n        let hdr = 'UNKNOWN ' + C // <-- replace with your desired default\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\n        headers.push(hdr)\n      }\n      return headers\n    },\n    isExcel(file) {\n      return /\\.(xlsx|xls|csv)$/.test(file.name)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.excel-upload-input{\n  display: none;\n  z-index: -9999;\n}\n.drop{\n  border: 2px dashed #bbb;\n  width: 600px;\n  height: 160px;\n  line-height: 160px;\n  margin: 0 auto;\n  font-size: 24px;\n  border-radius: 5px;\n  text-align: center;\n  color: #bbb;\n  position: relative;\n}\n</style>\n"],"sourceRoot":"src/components/UploadExcel"}]}