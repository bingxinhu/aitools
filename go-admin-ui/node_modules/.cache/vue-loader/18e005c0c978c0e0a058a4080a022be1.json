{"remainingRequest":"/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/src/views/admin/article/index.vue?vue&type=template&id=41b20de2&","dependencies":[{"path":"/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/src/views/admin/article/index.vue","mtime":1669257735079},{"path":"/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/node_modules/cache-loader/dist/cjs.js","mtime":1670489672947},{"path":"/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1670489672099},{"path":"/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/node_modules/cache-loader/dist/cjs.js","mtime":1670489672947},{"path":"/home/cxhpc/workroot_lfs/goadmin/go-admin-ui/node_modules/vue-loader/lib/index.js","mtime":1670489672091}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}